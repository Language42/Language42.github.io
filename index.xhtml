<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
    <link rel="stylesheet" type="text/css" href="https://forty2.is/css/style.css" media="all"/>
    <script src="https://forty2.is/js/ace.js"></script>
    <script src="https://forty2.is/js/utils.js"></script>
    <link rel="shortcut icon" href="https://forty2.is/css/favicon.ico"/>
    <title>42 - Metaprogramming as default</title>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script src="https://www.googletagmanager.com/gtag/js?id=G-M0E4M0XH2Z"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'G-M0E4M0XH2Z');
    </script>
    <script src="https://www.googletagmanager.com/gtag/js?id=UA-212820693-1">
    </script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'UA-212820693-1');
    </script>
    <script src="https://www.googletagmanager.com/gtag/js?id=AW-10810288706"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'AW-10810288706');
    </script>
  </head>
  <body onload='doOnLoad();'>
    <div id="wrapper">
      <div id="headerwrap">
        <div id="header">
          <a href="index.xhtml"><img style='float:left;'
            src='https://forty2.is/css/logoBlueSmaller.png' alt='42' width='120' height='120'/> </a>
          <h3 style='float:left;'>
            <p style='font-size:150%; color:rgb(250,250,250);'>42 - The definitive answer to design, code and everything</p>
            <p style='font-size:100%; color:rgb(250,250,250);'> --But you are not going to like it</p>
          </h3>
        </div>
      </div>
      <div id="contentwrap">
        <div id="content">
<p>



<Button class= 'button' type= 'button' onclick=
 "location.href = 'download.xhtml';">
Download
</Button>




<Button class= 'button' type= 'button' onclick=
 "location.href = 'tutorial_01Basics.xhtml';">
See the full Tutorial
</Button>

<Button class= 'button' type= 'button' onclick=
 "location.href = 'https://github.com/ElvisResearchGroup/L42';">
Git Repository
</Button>

<Button class= 'button' type= 'button' onclick=
 "location.href = 'https://www.youtube.com/MarcoServetto';">
42 Videos
</Button>

<Button class= 'button' type= 'button' onclick=
 "location.href = 'indexLib.xhtml';">
Libraries index
</Button>

<Button class= 'button' type= 'button' onclick=
 "location.href = 'https://ecs.wgtn.ac.nz/mailman/listinfo/team42';">
Mailing List
</Button>


<Div><p>
</p><h2> Why 42 </h2> <p>

42 is a new programming language, whose name is inspired by The Hitchhiker's Guide to the Galaxy.
Why should you give 42 a try?
</p><p>
42 programs are secure, easy to optimize and customize. In 42 you get:
<br/>
<ul>
<li><a href="#SeamlessCaching">
Seamless caching.
</a></li><li><a href="#DeterministicParallelism">
Deterministic parallelism.
</a></li><li><a href="#TypedClassDecorators">
Typed class decorators.
</a></li><li><a href="#AlwaysOnConstraints">
Always-on constraints.
</a></li><li><a href="#FineGrainedPermissions">
Fine grained permissions.
</a></li><li><a href="#IntegratedDeployment">
Integrated deployment.
</a></li><li><a href="#NoNeedOfSystemKnowledge">
No need of system knowledge
</a></li><li><a href="#Towels">
Towels!
</a></li></ul>

More in details:
</p><p>
<ul><li>
<h5 id="SeamlessCaching">Seamless caching</h5>
Most of the performance issues are not about smart ways to generate ultra fast assembly.
Most often they are about code repeating the same operations over and over again.
In 42 various forms of caching are proven semantically unobservable.
This means that those optimizations are easy to insert and are unable
to induce bugs into the system.
</li><li>
<h5 id="DeterministicParallelism">Deterministic parallelism</h5>
Caching and parallelism are the two main ways to optimize code.
While caching avoids doing the same operation over and over again,
parallelism allows doing more things at the same time.
In other languages, parallelism allows for non deterministic behaviour;
that is a nightmare to debug, especially when it is unintentional.

In 42 all parallelism is deterministic by construction,
thus no bugs can be caused by the quirks of parallel execution.
This allows us to take full advantage of many cores while keeping the simple deterministic and
sequential execution model in mind when testing and debugging code.
</li><li>
<h5 id="TypedClassDecorators">Typed class decorators</h5>
In a typical 42 program, the huge majority of the code is
automatically generated by user defined class decorators.
This allows for exceptionally compact programs, like a fully 3-tier application in less then 100 lines.
Instead of providing the full code, a code decorator takes a suggestion (a fragment of the full code)
and produces the full result.
In this way the programmer can focus the majority of their time
on writing the important bits of their code,
while redundant and repetitive code is automatically generated.
</li><li>
<h5 id="AlwaysOnConstraints">Always-on constraints</h5>
<q>Personal names start with an upper-case letter</q>,
<q>Those two lists have the same size</q>,
<q>This map contains an entry for all the cities of Japan</q>.
When writing code, we often assume our input data to satisfy certain expectations.
In 42 we can encode those expectations as user defined constraints on the data,
and it is then impossible to observe broken constraints.
In this way the data we work on can never become ill formed.
</li><li>
<h5 id="FineGrainedPermissions">Fine grained permissions</h5>
A secure program never does the wrong action.
For example, it never commits ill-formed data to the database.
In 42 a single localized part of code can clearly specify what those actions are
and what are the corresponding correctness criteria.
The rest of the code will be unable to break those criteria, and thus be unable to perform wrong actions.
In this way the programmer can focus the majority of their time on writing correct software,
while the security is guaranteed by the system.
This has pervasive security implications: in a large application, the most experienced programmer can 
write those constraints. Other programmers and library code will be unable to break those constraints,
no matter how hard they could try.
</li><li>
<h5 id="IntegratedDeployment">Integrated deployment</h5>
In other languages, writing a program is just the first step.
The program will need to be then tested and uploaded so that clients can use it.
This usually requires using a plethora of different tools.
This is not the case in 42: A typical 42 program will compile, test and deploy itself.
In 42 everything about an application is encoded by the code of that application.
</li><li>
<h5 id="NoNeedOfSystemKnowledge">No need of system knowledge</h5>
42 is designed from the ground up to avoid the need of any system knowledge:
A good 42 programmer just need to be good at designing code.
On the other side, to be a good programmer in other languages, you would also need to
know about shell commands, operative system conventions, environment variables, character encodings
and anything else usually connected with a specific operative system.
</li><li>
<h5 id="Towels">Towels!</h5>
Not all projects have the same requirements, and not all the developers have the same preferences.
Most languages are stuck with a single standard library,
that ends up being obsolete after a few years.
In 42, towels cover the same role of the standard library,
but towels can be personalized, to fit better a given company, project or programmer.
Methods and classes can be added, removed or simply renamed.
This can be done while preserving compatibility with the all of the third party libraries.
The same features allowing programmatic refactoring of the towel can be used on smaller units of code,
allowing to reuse, compose and customize code in a very flexible way.
</li>


</ul>
</p><p>
All those statements looks unbelievable given current programming wisdom.
<ul><li>
In the <a href="tutorial_01Basics.xhtml">guide</a>, we explain the language, and we explain those statements and how they work.
</li><li>
You can also <a href="download.xhtml">download 42</a> and try it yourself.
</li><li>
You can also engage with the open source GitHub <a href="https://github.com/ElvisResearchGroup/L42">repository</a>.
</li>
</ul>



<!--
42 is a new programming language,
whose name is inspired by The Hitchhiker's Guide to the Galaxy.
The language's goal is to allow the transparent cooperation and composition of millions of libraries at the same time, while providing a much higher security that any other widly used language.
</p><p>
In 42 you will be able to import libraries just by naming them and to
compose them in your code without worrying about their dependencies.
Normally libraries are big monolithic things, coming from outside and manually imported/installed. The user has little control over
the library code, and the library has no influence over the importing context.
</p><p>
In 42 libraries are usually much smaller and are first class entities, that can be manipulated as values, loaded, stored, modified, adapted, saved or simply used. You will write code that manipulate libraries, but more importantly you will use libraries that manipulate libraries in non-trivial ways.
Indeed in 42 manipulating libraries is so natural that is convenient to think of your own code as a library that you offer to yourself only.
</p><p>
42 enforces a high level of abstraction, thus there is no concept of null or default initialization.
While is possible to write in a fully functional style in 42, usually 42 programs mix
<span style="color:#ff1111; font-weight: bold;"> mutable datastructures with aliasing </span>
and
<span style="color:#ff1111; font-weight: bold;"> deeply immutable data </span>.
By using reference and object capabilities,
42 supports mutability and aliasing control, helping in mixing the two styles in an easy and natural way.

</p><p>
Reference and object capabilities
enforce the correctness of caching, representation invariants and parallelism.
-->
</p></Div>


<Div id= "c"><p>
</p><h2> Pure and fair Object Oriented language </h2> <p>
42 is a pure object oriented language,
where every value is an object. This means that: 
<ul>
<li>
Numbers are objects, 
so thay can have methods like <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[.sqrt()]]></span><it style="font-style: bold; color:green;">&#187;</it> or <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[.abs()]]></span><it style="font-style: bold; color:green;">&#187;</it>. 
</li><li>
All operators are just method calls, thus <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[a + b]]></span><it style="font-style: bold; color:green;">&#187;</it> can be sugar for <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[a.#plus0(b)]]></span><it style="font-style: bold; color:green;">&#187;</it>, 
and so on. Note how <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[#plus0]]></span><it style="font-style: bold; color:green;">&#187;</it> is just an ordinary method name.
Any class that offers the method supports the operator.

</li><li>
Classes are objects, so when you write <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Foo.bar()]]></span><it style="font-style: bold; color:green;">&#187;</it> you refer to the method <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[.bar()]]></span><it style="font-style: bold; color:green;">&#187;</it> offered by the object denoted by <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Foo]]></span><it style="font-style: bold; color:green;">&#187;</it>.
class objects are just objects, and you can also store them in local bindings if you wish, as in <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[x = Foo]]></span><it style="font-style: bold; color:green;">&#187;</it>
</li><li>
The code is an object, but only at the granularity of 
Libraries; that is, balanced pairs of curly brackets representing classes (or interfaces) with methods and nested libraries.
This is useful for meta-programming, which we will see later.

</li><li>
Differently from other pure object oriented languages, in 42
all objects have the same treatment, both syntactically and semantically.
For example <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[x =  S"Hello " ++ S"World"]]></span><it style="font-style: bold; color:green;">&#187;</it>
This is a declaration for a local binding <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[x]]></span><it style="font-style: bold; color:green;">&#187;</it>, using the string class <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[S]]></span><it style="font-style: bold; color:green;">&#187;</it> and the method operator <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[++]]></span><it style="font-style: bold; color:green;">&#187;</it>,
used as string (or in general sequence/collection) concatenation.

Coming from another programming language, you may be surprised that we have to write <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[S]]></span><it style="font-style: bold; color:green;">&#187;</it> before <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA["Hello "]]></span><it style="font-style: bold; color:green;">&#187;</it> and <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA["World"]]></span><it style="font-style: bold; color:green;">&#187;</it>.
This extra verbosity is needed to provide fair treatment to all classes. (<a href="http://l42.is/tutorial.xhtml#BasicClasses.xhtml">see more in Basic classes</a>)
In 42 we do not give preferential treatment
to special objects/classes. In this sense, we consider
most other languages to be discriminatory.
They give priority to their "preferred" version of numbers and strings, and this puts into a position of unfair disadvantage library code trying to define its own kinds of numbers/strings.
Instead in 42 you may encounter strings like <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Url"www.google.com"]]></span><it style="font-style: bold; color:green;">&#187;</it> or
 <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Email"Arthur.Dent@gmail.com"]]></span><it style="font-style: bold; color:green;">&#187;</it>.
The same for numeric classes: to talk about a street, 20 meters long, you would write
<it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[streetLength= 20Meter]]></span><it style="font-style: bold; color:green;">&#187;</it>.
Note that we write the class name after the number,
while usually the class name is before.
42 is a little incoherent in this point, both for better readability and because <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Meter20]]></span><it style="font-style: bold; color:green;">&#187;</it> would be considered an identifier by the parser.
You may encounter <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[I]]></span><it style="font-style: bold; color:green;">&#187;</it>, <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Num]]></span><it style="font-style: bold; color:green;">&#187;</it>, <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Double]]></span><it style="font-style: bold; color:green;">&#187;</it>, <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Meter]]></span><it style="font-style: bold; color:green;">&#187;</it>, <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Kg]]></span><it style="font-style: bold; color:green;">&#187;</it>, <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Second]]></span><it style="font-style: bold; color:green;">&#187;</it>, <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[Year]]></span><it style="font-style: bold; color:green;">&#187;</it>, <it style="font-style: bold; color:green;">&#171;</it><span class="code"><![CDATA[PhoneNumber]]></span><it style="font-style: bold; color:green;">&#187;</it> and many other numeric classes.
</li></ul>

</p><h2> A simple language </h2> <p>
We believe 42 is a simple language,
where all classes are final and interfaces are the only instrument to obtain subtyping.
Moreover, 42 does not offer many controversial features usually found in other programming
languages, including: 
(method) overloading; threading; numeric conversions and coercions; var-args; primitive types and automatic (un-)boxing;
inner classes; arrays; generics; scope-hiding of local variables/bindings, methods and fields;
closures/lambdas and null.

</p></Div>






        </p>
        </div>
      </div>
      <div id="footerwrap">
        <div id="footer">
          <ul style='padding: 10px;'>
            <li style='display:inline;'>
            <a href="mailto:marco.servetto@gmail.com" rel="me">Contact Us</a> |</li>
            <li style='display:inline;'>
            <a href= "http://ecs.victoria.ac.nz/mailman/listinfo/team42">Mailing list</a> |</li>
          </ul>
        </div>
      </div>
    </div>

	
  </body>
</html>
